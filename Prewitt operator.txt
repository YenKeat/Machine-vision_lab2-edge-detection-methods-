import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Open the image
img = cv2.imread('pic2.png')
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
img = np.array(img).astype(np.uint8)

# Apply gray scale
gray_img = np.round(0.299 * img[:, :, 0] +
                    0.587 * img[:, :, 1] +
                    0.114 * img[:, :, 2]).astype(np.uint8)

# Prewitt Operator
h, w = gray_img.shape
# define filters
horizontal = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])  # s2
vertical = np.array([[-1, -1, -1], [0, 0, 0], [1, 1, 1]])  # s1

# define images with 0s
newgradientImage = np.zeros((h, w))

# offset by 1
for i in range(1, h - 1):
    for j in range(1, w - 1):
        horizontalGrad = (horizontal[0, 0] * gray_img[i - 1, j - 1]) + \
                         (horizontal[0, 1] * gray_img[i - 1, j]) + \
                         (horizontal[0, 2] * gray_img[i - 1, j + 1]) + \
                         (horizontal[1, 0] * gray_img[i, j - 1]) + \
                         (horizontal[1, 1] * gray_img[i, j]) + \
                         (horizontal[1, 2] * gray_img[i, j + 1]) + \
                         (horizontal[2, 0] * gray_img[i + 1, j - 1]) + \
                         (horizontal[2, 1] * gray_img[i + 1, j]) + \
                         (horizontal[2, 2] * gray_img[i + 1, j + 1])

        verticalGrad = (vertical[0, 0] * gray_img[i - 1, j - 1]) + \
                       (vertical[0, 1] * gray_img[i - 1, j]) + \
                       (vertical[0, 2] * gray_img[i - 1, j + 1]) + \
                       (vertical[1, 0] * gray_img[i, j - 1]) + \
                       (vertical[1, 1] * gray_img[i, j]) + \
                       (vertical[1, 2] * gray_img[i, j + 1]) + \
                       (vertical[2, 0] * gray_img[i + 1, j - 1]) + \
                       (vertical[2, 1] * gray_img[i + 1, j]) + \
                       (vertical[2, 2] * gray_img[i + 1, j + 1])

        # Edge Magnitude
        mag = np.sqrt(pow(horizontalGrad, 2.0) + pow(verticalGrad, 2.0))
        newgradientImage[i - 1, j - 1] = mag

# Threshold the magnitude image to get binary mask
_, mask = cv2.threshold(newgradientImage, 40, 255, cv2.THRESH_BINARY)

# Ensure mask is uint8
mask = mask.astype(np.uint8)

# Dilate the mask to ensure the entire object is covered
kernel = np.ones((3, 3), np.uint8)
mask = cv2.dilate(mask, kernel, iterations=1)

# Invert the mask to get the background
mask_inv = cv2.bitwise_not(mask)

# Create a white background image
white_background = np.ones_like(gray_img) * 255

# Use the mask to extract the object from the original image
object_only = cv2.bitwise_and(gray_img, gray_img, mask=mask)

# Use the inverse mask to extract the background from the white background image
background_only = cv2.bitwise_and(white_background, white_background, mask=mask_inv)

# Combine the object and the white background
final_image = cv2.add(object_only, background_only)

# Plot the results
plt.figure(figsize=(12, 6))
plt.subplot(1, 3, 1)
plt.title('Original Image')
plt.imshow(img, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title('Prewitt Detection')
plt.imshow(newgradientImage,cmap ='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title('Prewitt Detection with binary mask')
plt.imshow(final_image,cmap ='gray')
plt.axis('off')

plt.show()